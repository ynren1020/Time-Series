# From ChatGPT ----
# Let's go through a detailed example of analyzing, visualizing, and modeling irregularly spaced heart rate data using R.
We'll follow these steps:
1. Stimulate irregularly spaced heart rate data
2. Process the data
3. Visualize heart rate trends
4. Detect abnormal patterns with a model

We'll use R packages such as zoo, xts, ggplot2, and abnomalize for this analysis.

Step1: Simulate Irregularly Spaced Heart Rate Data
Here, we simulate some irregularly spaced data, representing heart rate measurements taken at random intervals throughout a day.

# Load necessary libraries ----
library(zoo)
library(dplyr)
library(ggplot2)
library(anomalize)

# Simulate irregular time series data ----
set.seed(123)
timestamps <- sort(sample(seq(as.POSIXct("2023-10-01 00:00"), as.POSIXct(2023-10-01 23:59"), by = "min"), 100))
heart_rates <- rnorm(100, mean = 70, sd = 10)

# Create a zoo object ----
hr_data <- zoo(heart_rates, timestamps)
head(hr_data)

This creates an irregularly spaced time series of heart rate data. The timestamps are randomly selected, and heart rates are drawn from a normal distribution with 
a mean of 70 and standard deviation of 10.

Step 2: Process the Data 
Before analysis, let's preprocess the data to fill any missing intervals (if required) and calculate daily averages.
# Convert to a data frame for ease of manipulation 
hr_df <- data.frame(time = index(hr_data), heart_rate = coredata(hr_data))

# Fill in missing intervals (optional)
# Here we could interpolate or carry forward the last value 
hr_df_filled <- hr_df %>%
  complete(time = seq(min(time), max(time), by = "1 min")) %>%
  fill(heart_rate, .direction = "down")

# Step 3: Visualize Heart Rate Trends 
We'll plot the heart rate data to observe general patterns over the course of the day.

# Plot heart rate time series 
ggplot(hr_df_filled, aes(x = time, y = heart_rate)) + 
  geom_line(color = "blue") +
  labs(title = "Heart Rate Over Time"), x = "Time", y = "Heart Rate (bpm)") + 
  theme_minimal()

This plot provides a visual overview of heart rate trends. We can see fluctuations and identify any visible spikes or drops.

Step 4: Detect Abnormal Patterns with Anomalize 
To detect anomalies, we'll use the anomalize package, which can flag unusual patterns in time series data.

# Prepare data for anomaly detection
library(anomalize)
# Detect anomalies using time_decompose() and anomalize()
anomaly_df <- hr_df_filled |>
as_tbl_time(index = time) |>
time_decompose(heart_rate, method = "stl", trend = "1 day") |>
anomalize(remainder, method = "iqr") |>
time_recompose()

# Plot anomalies
anomaly_df |>
plot_anomalies(time_recomposed = TRUE) + 
labs(title = "Detected Heart Rate Anomalies", x = "Time", y = "Heart Rate (bpm)")

The plot_anomalies() function highlights points that deviate significantly from the trend, making it easier to pinpoint unusual heart rate patterns.

# Step 5: Modeling and Forecasting 
We can fit a time series model to forecast heart rate, using methods such as exponential smoothing (ETS) or autoregressive integrated moving average (ARIMA).
Let's use forecast and forecast::ets for this purpose.
# Load forecast package 
library(forecast)

# Convert data to a regular time series for forecasting (fill missing with linear interpolation)
hr_ts <- zoo::na.approx(ht_data) |> ts(frequency = 1440) # 1440 minutes in a day
# Fit an ETS model 
fit <- ets(hr_ts)

# Forecast next 60 minutes (1 hour)
forecast_values <- forecast(fit, h = 60)

# Plot the forecast 
autoplot(forecast_values) +
  labs(title = "Heart Rate Forecast", x = "Time", y = "Heart Rate (bpm)")

This forecast can help predict the heart rate trend over the next hour, which might assist in identifying potentially abnormal future values.

Interpretation 
1. Trends: Visualizations show the general trend and fluctuations in heart rate.
2. Anomalies: Anomalous heart rate values are flagged in the anomalize plot, which can signal irregularities or abnormal patterns.
3. Forecasting: The time series model gives a short-term forecast, potentially helpful for preventive monitoring.

This pipeline provides a structured approach to analyze, visualize, and model heart rate data, facilitating both pattern analysis and abnormal pattern detection.
